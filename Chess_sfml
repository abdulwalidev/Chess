#include <SFML/Graphics.hpp>
#include <iostream>
#include <cctype>
#include <cmath>

using namespace std;
using namespace sf;

const int BOARD_SIZE = 8;
const int TILE_SIZE = 100;
const int WINDOW_SIZE = TILE_SIZE * BOARD_SIZE;

// Chess game state variables
char board[BOARD_SIZE][BOARD_SIZE];
bool whiteKingMoved = false;
bool blackKingMoved = false;
bool whiteRookLeftMoved = false;
bool whiteRookRightMoved = false;
bool blackRookLeftMoved = false;
bool blackRookRightMoved = false;

// Valid moves storage - using simple arrays instead of vectors
bool validMovesGrid[BOARD_SIZE][BOARD_SIZE];
int validMovesCount = 0;

// Textures for chess pieces (optional)
Texture figureTexture;
Texture boardTexture;

struct ChessPiece {
    char type;
    bool isWhite;
    float posX, posY;

    void draw(RenderWindow& window, int row, int col) {
        // Calculate center position of tile for perfect alignment
        float centerX = col * TILE_SIZE + TILE_SIZE / 2.0f;
        float centerY = row * TILE_SIZE + TILE_SIZE / 2.0f;

        // Check if texture is loaded, if not use geometric shapes
        if (figureTexture.getSize().x > 0) {
            drawWithTexture(window, centerX, centerY);
        }
        else {
            drawGeometricShape(window, centerX, centerY);
        }
    }

    void drawWithTexture(RenderWindow& window, float centerX, float centerY) {
        Sprite pieceSprite;
        pieceSprite.setTexture(figureTexture);

        // Get the texture rectangle based on piece type and color
        int textureX = 0, textureY = 0;

        switch (tolower(type)) {
        case 'k': textureX = 4; break;
        case 'q': textureX = 3; break;
        case 'r': textureX = 0; break;
        case 'b': textureX = 2; break;
        case 'n': textureX = 1; break;
        case 'p': textureX = 5; break;
        }

        // Set color row (white=1, black=0) - this might also need adjustment
        // Some sprite sheets have black on top (row 0) and white on bottom (row 1)
        // Others have it reversed
        textureY = isWhite ? 1 : 0;

        const int SPRITE_SIZE = 56;
        pieceSprite.setTextureRect(IntRect(textureX * SPRITE_SIZE, textureY * SPRITE_SIZE, SPRITE_SIZE, SPRITE_SIZE));

        // Scale sprite to fit tile size nicely
        float scale = (TILE_SIZE * 0.8f) / SPRITE_SIZE;
        pieceSprite.setScale(scale, scale);

        // Center the sprite on the tile
        pieceSprite.setOrigin(SPRITE_SIZE / 2.0f, SPRITE_SIZE / 2.0f);
        pieceSprite.setPosition(centerX, centerY);

        window.draw(pieceSprite);
    }

    void drawGeometricShape(RenderWindow& window, float centerX, float centerY) {
        Color pieceColor = isWhite ? Color(255, 215, 0) : Color(0, 128, 0); // Golden vs Green
        float pieceSize = TILE_SIZE * 0.7f; // 70% of tile size for better fit

        switch (tolower(type)) {
        case 'p': { // Pawn - Circle
            CircleShape pawn(pieceSize / 2);
            pawn.setFillColor(pieceColor);
            pawn.setOutlineThickness(2);
            pawn.setOutlineColor(Color::Black);
            pawn.setOrigin(pieceSize / 2, pieceSize / 2);
            pawn.setPosition(centerX, centerY);
            window.draw(pawn);
            break;
        }
        case 'r': { // Rook - Rectangle
            RectangleShape rook;
            rook.setSize(Vector2f(pieceSize, pieceSize));
            rook.setFillColor(pieceColor);
            rook.setOutlineThickness(2);
            rook.setOutlineColor(Color::Black);
            rook.setOrigin(pieceSize / 2, pieceSize / 2);
            rook.setPosition(centerX, centerY);
            window.draw(rook);
            break;
        }
        case 'n': { // Knight - Triangle
            CircleShape knight(pieceSize / 2, 3);
            knight.setFillColor(pieceColor);
            knight.setOutlineThickness(2);
            knight.setOutlineColor(Color::Black);
            knight.setOrigin(pieceSize / 2, pieceSize / 2);
            knight.setPosition(centerX, centerY);
            window.draw(knight);
            break;
        }
        case 'b': { // Bishop - Diamond
            CircleShape bishop(pieceSize / 2, 4);
            bishop.setFillColor(pieceColor);
            bishop.setOutlineThickness(2);
            bishop.setOutlineColor(Color::Black);
            bishop.setOrigin(pieceSize / 2, pieceSize / 2);
            bishop.setPosition(centerX, centerY);
            bishop.setRotation(45);
            window.draw(bishop);
            break;
        }
        case 'q': { // Queen - Octagon
            CircleShape queen(pieceSize / 2, 8);
            queen.setFillColor(pieceColor);
            queen.setOutlineThickness(2);
            queen.setOutlineColor(Color::Black);
            queen.setOrigin(pieceSize / 2, pieceSize / 2);
            queen.setPosition(centerX, centerY);
            window.draw(queen);
            break;
        }
        case 'k': { // King - Hexagon
            CircleShape king(pieceSize / 2, 6);
            king.setFillColor(pieceColor);
            king.setOutlineThickness(3);
            king.setOutlineColor(Color::Red);
            king.setOrigin(pieceSize / 2, pieceSize / 2);
            king.setPosition(centerX, centerY);
            window.draw(king);
            break;
        }
        }
    }
};

char currentPlayer = 'w';
int selectedRow = -1, selectedCol = -1;
bool pieceSelected = false;

void initializeBoard() {
    // Initialize pawns
    for (int i = 0; i < BOARD_SIZE; ++i) {
        board[1][i] = 'p'; // Black pawns
        board[6][i] = 'P'; // White pawns
    }

    // Initialize other pieces
    const char white_pieces[] = { 'R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R' };
    const char black_pieces[] = { 'r', 'n', 'b', 'q', 'k', 'b', 'n', 'r' };

    for (int i = 0; i < BOARD_SIZE; ++i) {
        board[0][i] = black_pieces[i]; // Black back row
        board[7][i] = white_pieces[i]; // White back row
    }

    // Initialize empty squares
    for (int i = 2; i < 6; ++i) {
        for (int j = 0; j < BOARD_SIZE; ++j) {
            board[i][j] = '-';
        }
    }
}

void clearValidMoves() {
    for (int i = 0; i < BOARD_SIZE; ++i) {
        for (int j = 0; j < BOARD_SIZE; ++j) {
            validMovesGrid[i][j] = false;
        }
    }
    validMovesCount = 0;
}

void drawBoard(RenderWindow& window) {
    for (int row = 0; row < BOARD_SIZE; ++row) {
        for (int col = 0; col < BOARD_SIZE; ++col) {
            RectangleShape tile;
            tile.setSize(Vector2f(TILE_SIZE, TILE_SIZE));
            tile.setPosition(col * TILE_SIZE, row * TILE_SIZE);

            // Set tile color based on position (classic chessboard colors)
            if ((row + col) % 2 == 0) {
                tile.setFillColor(Color(240, 217, 181)); // light square
            }
            else {
                tile.setFillColor(Color(181, 136, 99)); // dark square
            }

            // Highlight the selected square with semi-transparent blue overlay
            if (pieceSelected && selectedRow == row && selectedCol == col) {
                // Draw the tile normally first
                window.draw(tile);
                // Then draw a semi-transparent overlay on top
                RectangleShape highlight;
                highlight.setSize(Vector2f(TILE_SIZE, TILE_SIZE));
                highlight.setPosition(col * TILE_SIZE, row * TILE_SIZE);
                highlight.setFillColor(Color(0, 0, 255, 128)); // semi-transparent blue
                window.draw(highlight);
            }
            else {
                // Just draw the tile if not selected
                window.draw(tile);
            }
        }
    }
}

void drawMoveDots(RenderWindow& window) {
    if (!pieceSelected) return;

    for (int row = 0; row < BOARD_SIZE; ++row) {
        for (int col = 0; col < BOARD_SIZE; ++col) {
            if (validMovesGrid[row][col]) {
                float centerX = col * TILE_SIZE + TILE_SIZE / 2.0f;
                float centerY = row * TILE_SIZE + TILE_SIZE / 2.0f;

                // Different dot styles for empty squares vs capture moves
                if (board[row][col] == '-') {
                    // Small dot for empty squares
                    CircleShape dot(8.0f);
                    dot.setFillColor(Color(0, 0, 0, 180)); // Semi-transparent black
                    dot.setOrigin(8.0f, 8.0f);
                    dot.setPosition(centerX, centerY);
                    window.draw(dot);
                }
                else {
                    // Hollow circle for capture moves
                    CircleShape captureRing(TILE_SIZE * 0.4f);
                    captureRing.setFillColor(Color::Transparent);
                    captureRing.setOutlineThickness(4.0f);
                    captureRing.setOutlineColor(Color(255, 0, 0, 180)); // Semi-transparent red
                    captureRing.setOrigin(TILE_SIZE * 0.4f, TILE_SIZE * 0.4f);
                    captureRing.setPosition(centerX, centerY);
                    window.draw(captureRing);
                }
            }
        }
    }
}

void drawPieces(RenderWindow& window) {
    for (int row = 0; row < BOARD_SIZE; ++row) {
        for (int col = 0; col < BOARD_SIZE; ++col) {
            if (board[row][col] != '-') {
                ChessPiece piece;
                piece.type = board[row][col];
                piece.isWhite = isupper(board[row][col]);
                piece.posX = col * TILE_SIZE + TILE_SIZE / 2.0f;
                piece.posY = row * TILE_SIZE + TILE_SIZE / 2.0f;
                piece.draw(window, row, col);
            }
        }
    }
}

bool isPathClear(int row, int col1, int col2) {
    if (col1 > col2) {
        swap(col1, col2);
    }
    for (int c = col1 + 1; c < col2; ++c) {
        if (board[row][c] != '-') return false;
    }
    return true;
}

bool isCastlingMove(int srcRow, int srcCol, int destRow, int destCol, char player) {
    if (player == 'w' && srcRow == 7 && srcCol == 4 && destRow == 7 && (destCol == 6 || destCol == 2)) {
        if (whiteKingMoved) return false;
        if (destCol == 6 && !whiteRookRightMoved && board[7][7] == 'R' && isPathClear(7, 4, 7)) return true;
        if (destCol == 2 && !whiteRookLeftMoved && board[7][0] == 'R' && isPathClear(7, 0, 4)) return true;
    }
    if (player == 'b' && srcRow == 0 && srcCol == 4 && destRow == 0 && (destCol == 6 || destCol == 2)) {
        if (blackKingMoved) return false;
        if (destCol == 6 && !blackRookRightMoved && board[0][7] == 'r' && isPathClear(0, 4, 7)) return true;
        if (destCol == 2 && !blackRookLeftMoved && board[0][0] == 'r' && isPathClear(0, 0, 4)) return true;
    }
    return false;
}

void performCastling(int row, int destCol) {
    if (destCol == 6) {
        board[row][5] = board[row][7];
        board[row][7] = '-';
    }
    else if (destCol == 2) {
        board[row][3] = board[row][0];
        board[row][0] = '-';
    }
}

bool isValidPawnMove(int srcRow, int srcCol, int destRow, int destCol, char player) {
    int direction = (player == 'w') ? -1 : 1;
    bool isOpponentPiece = (player == 'w') ? islower(board[destRow][destCol]) : isupper(board[destRow][destCol]);

    if (srcCol == destCol && board[destRow][destCol] == '-') {
        return (destRow - srcRow == direction) ||
            (srcRow == (player == 'w' ? 6 : 1) && destRow - srcRow == 2 * direction && board[srcRow + direction][srcCol] == '-');
    }

    if (abs(srcCol - destCol) == 1 && destRow - srcRow == direction && isOpponentPiece) {
        return true;
    }

    return false;
}

bool isValidRookMove(int srcRow, int srcCol, int destRow, int destCol, char player) {
    if (srcRow != destRow && srcCol != destCol) return false;

    int rowStep = (srcRow < destRow) ? 1 : (srcRow > destRow ? -1 : 0);
    int colStep = (srcCol < destCol) ? 1 : (srcCol > destCol ? -1 : 0);

    for (int i = srcRow + rowStep, j = srcCol + colStep; i != destRow || j != destCol; i += rowStep, j += colStep) {
        if (board[i][j] != '-') return false;
    }

    char target = board[destRow][destCol];
    return target == '-' || (player == 'w' ? islower(target) : isupper(target));
}

bool isValidBishopMove(int srcRow, int srcCol, int destRow, int destCol, char player) {
    if (abs(srcRow - destRow) != abs(srcCol - destCol)) return false;

    int rowStep = (srcRow < destRow) ? 1 : -1;
    int colStep = (srcCol < destCol) ? 1 : -1;

    for (int i = srcRow + rowStep, j = srcCol + colStep; i != destRow; i += rowStep, j += colStep) {
        if (board[i][j] != '-') return false;
    }

    char target = board[destRow][destCol];
    return target == '-' || (player == 'w' ? islower(target) : isupper(target));
}

bool isValidKnightMove(int srcRow, int srcCol, int destRow, int destCol, char player) {
    int dr = abs(srcRow - destRow), dc = abs(srcCol - destCol);
    char target = board[destRow][destCol];
    return (dr == 2 && dc == 1 || dr == 1 && dc == 2) &&
        (target == '-' || (player == 'w' ? islower(target) : isupper(target)));
}

bool isValidQueenMove(int srcRow, int srcCol, int destRow, int destCol, char player) {
    return isValidRookMove(srcRow, srcCol, destRow, destCol, player) ||
        isValidBishopMove(srcRow, srcCol, destRow, destCol, player);
}

bool isValidKingMove(int srcRow, int srcCol, int destRow, int destCol, char player) {
    if (isCastlingMove(srcRow, srcCol, destRow, destCol, player)) return true;

    int dr = abs(srcRow - destRow), dc = abs(srcCol - destCol);
    char target = board[destRow][destCol];
    return dr <= 1 && dc <= 1 &&
        (target == '-' || (player == 'w' ? islower(target) : isupper(target)));
}

bool isValidMove(int srcRow, int srcCol, int destRow, int destCol, char player) {
    if (srcRow == destRow && srcCol == destCol) return false;

    char piece = board[srcRow][srcCol];
    if (player == 'w' && !isupper(piece)) return false;
    if (player == 'b' && !islower(piece)) return false;

    piece = tolower(piece);
    switch (piece) {
    case 'p': return isValidPawnMove(srcRow, srcCol, destRow, destCol, player);
    case 'r': return isValidRookMove(srcRow, srcCol, destRow, destCol, player);
    case 'n': return isValidKnightMove(srcRow, srcCol, destRow, destCol, player);
    case 'b': return isValidBishopMove(srcRow, srcCol, destRow, destCol, player);
    case 'q': return isValidQueenMove(srcRow, srcCol, destRow, destCol, player);
    case 'k': return isValidKingMove(srcRow, srcCol, destRow, destCol, player);
    default: return false;
    }
}

bool isKingInCheck(char player) {
    char king = (player == 'w') ? 'K' : 'k';
    int kr = -1, kc = -1;

    for (int i = 0; i < 8; ++i) {
        for (int j = 0; j < 8; ++j) {
            if (board[i][j] == king) {
                kr = i;
                kc = j;
            }
        }
    }

    char opponent = (player == 'w') ? 'b' : 'w';
    for (int i = 0; i < 8; ++i) {
        for (int j = 0; j < 8; ++j) {
            if ((opponent == 'w' && isupper(board[i][j])) ||
                (opponent == 'b' && islower(board[i][j]))) {
                if (isValidMove(i, j, kr, kc, opponent)) return true;
            }
        }
    }
    return false;
}

void promotePawn(int row, int col, char player) {
    char newPiece = (player == 'w') ? 'Q' : 'q';
    board[row][col] = newPiece;
}

void calculateValidMoves(int srcRow, int srcCol, char player) {
    clearValidMoves();

    for (int row = 0; row < BOARD_SIZE; ++row) {
        for (int col = 0; col < BOARD_SIZE; ++col) {
            if (isValidMove(srcRow, srcCol, row, col, player)) {
                // Test if this move would leave king in check
                char originalPiece = board[row][col];
                char movedPiece = board[srcRow][srcCol];

                // Make temporary move
                board[row][col] = movedPiece;
                board[srcRow][srcCol] = '-';

                // Check if king would be in check after this move
                bool wouldBeInCheck = isKingInCheck(player);

                // Restore board
                board[srcRow][srcCol] = movedPiece;
                board[row][col] = originalPiece;

                // If move doesn't put king in check, it's valid
                if (!wouldBeInCheck) {
                    validMovesGrid[row][col] = true;
                    validMovesCount++;
                }
            }
        }
    }
}

void handleMove(int targetRow, int targetCol) {
    if (!pieceSelected) {
        char piece = board[targetRow][targetCol];
        if ((currentPlayer == 'w' && isupper(piece)) ||
            (currentPlayer == 'b' && islower(piece))) {
            selectedRow = targetRow;
            selectedCol = targetCol;
            pieceSelected = true;
            // Calculate valid moves for the selected piece
            calculateValidMoves(selectedRow, selectedCol, currentPlayer);
        }
    }
    else {
        // Check if the target square is a valid move
        if (validMovesGrid[targetRow][targetCol]) {
            char movedPiece = board[selectedRow][selectedCol];
            bool castling = isCastlingMove(selectedRow, selectedCol, targetRow, targetCol, currentPlayer);

            // Make the move
            board[targetRow][targetCol] = movedPiece;
            board[selectedRow][selectedCol] = '-';
            if (castling) performCastling(targetRow, targetCol);

            // Update castling flags
            if (movedPiece == 'K') whiteKingMoved = true;
            if (movedPiece == 'k') blackKingMoved = true;
            if (movedPiece == 'R' && selectedCol == 0 && selectedRow == 7) whiteRookLeftMoved = true;
            if (movedPiece == 'R' && selectedCol == 7 && selectedRow == 7) whiteRookRightMoved = true;
            if (movedPiece == 'r' && selectedCol == 0 && selectedRow == 0) blackRookLeftMoved = true;
            if (movedPiece == 'r' && selectedCol == 7 && selectedRow == 0) blackRookRightMoved = true;

            // Pawn promotion
            if ((movedPiece == 'P' && targetRow == 0) || (movedPiece == 'p' && targetRow == 7)) {
                promotePawn(targetRow, targetCol, currentPlayer);
            }

            // Switch players
            currentPlayer = (currentPlayer == 'w') ? 'b' : 'w';
        }

        pieceSelected = false;
        selectedRow = -1;
        selectedCol = -1;
        clearValidMoves();
    }
}

int main() {
    RenderWindow window(VideoMode(WINDOW_SIZE, WINDOW_SIZE), "SFML Chess Game - Enhanced with Move Dots");

    // Try to load textures (optional enhancement)
    const char* figurePaths[] = {
        "images/figures.png",
        "figures.png",
        "assets/figures.png",
        "chess_figures.png"
    };

    bool figureLoaded = false;
    for (int i = 0; i < 4; ++i) {
        if (figureTexture.loadFromFile(figurePaths[i])) {
            cout << "Successfully loaded figures from: " << figurePaths[i] << endl;
            figureLoaded = true;
            break;
        }
    }

    if (!figureLoaded) {
        cout << "Chess piece images not found. Using geometric shapes for pieces." << endl;
    }

    // Try to load board texture (optional)
    const char* boardPaths[] = {
        "images/board.png",
        "board.png",
        "assets/board.png"
    };

    bool boardLoaded = false;
    for (int i = 0; i < 3; ++i) {
        if (boardTexture.loadFromFile(boardPaths[i])) {
            cout << "Successfully loaded board from: " << boardPaths[i] << endl;
            boardLoaded = true;
            break;
        }
    }

    if (!boardLoaded) {
        cout << "Board texture not found. Using colored squares for board." << endl;
    }

    initializeBoard();

    while (window.isOpen()) {
        Event event;
        while (window.pollEvent(event)) {
            if (event.type == Event::Closed) {
                window.close();
            }

            if (event.type == Event::MouseButtonPressed && event.mouseButton.button == Mouse::Left) {
                int col = event.mouseButton.x / TILE_SIZE;
                int row = event.mouseButton.y / TILE_SIZE;

                if (row >= 0 && row < BOARD_SIZE && col >= 0 && col < BOARD_SIZE) {
                    handleMove(row, col);
                }
            }
        }

        window.clear(Color::White);
        drawBoard(window);
        drawMoveDots(window);

        drawPieces(window);
        window.display();
    }

    return 0;
}
